#!/usr/bin env python3

import os
import shutil
import argparse
from typing import List, Dict
from mutagen.easyid3 import EasyID3


def load_musicfiles(path: str) -> List[str]:
    """
    Recursively searches for mp3 music files in a directory
    :param path: The path in which to find the files
    :return: A list containing the paths to the mp3 files
    """
    files = []
    for child in os.listdir(path):
        child_path = os.path.join(path, child)

        if os.path.isdir(child_path):
            files += load_musicfiles(child_path)
        elif os.path.isfile(child_path) and child.endswith(".mp3"):
            files.append(child_path)
    return files


def generate_structure(musicfiles: List[str]) \
        -> Dict[str, Dict[str, List[str]]]:
    """
    Generates a dictionary based on the mp3 tag data of the mp3 files mapping
    songs to their artist and album
    :param musicfiles: The list of mp3 files
    :return: The generated dictionary: {artist: album: [songs]}
    """
    structure = {}
    for music in musicfiles:
        mp3_info = EasyID3(music)
        artist = mp3_info.get("artist", ["Unknown"])[0]
        album = mp3_info.get("album", ["Unknown"])[0]
        if artist not in structure:
            structure[artist] = {}
        if album not in structure[artist]:
            structure[artist][album] = []
        structure[artist][album].append(music)
    return structure


def generate_library(structure: Dict[str, Dict[str, List[str]]], dest: str):
    """
    Generates the tag-based folder structure
    :param structure: The structure to create
    :param dest: The path where to create the structure
    :return: None
    """
    for artist in structure:
        artist_path = os.path.join(dest, artist)
        os.makedirs(artist_path)
        for album in structure[artist]:
            album_path = os.path.join(artist_path, album)
            os.makedirs(album_path)
            for music in structure[artist][album]:
                filename = os.path.basename(music)
                music_path = os.path.join(album_path, filename)
                shutil.copyfile(music, music_path)


def main():
    """
    This script automatically generates a folder structure based on
    the mp3 metadata of music files.
    The songs are categorized by their artist, then the album.
    The song files are only copied, not moved, so the original file structure
    won't be destroyed
    :return: None
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("source", help="The source directory")
    parser.add_argument("dest", help="The target directory")
    args = parser.parse_args()
    source = args.source
    dest = args.dest

    prompt = input(dest + " will be deleted, is this OK? (y|n)")
    if prompt != "y":
        exit()

    if os.path.isdir(dest):
        shutil.rmtree(dest)
    os.makedirs(dest)

    musicfiles = load_musicfiles(source)
    structure = generate_structure(musicfiles)
    generate_library(structure, dest)


if __name__ == "__main__":
    main()
