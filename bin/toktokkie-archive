#!/usr/bin/env python

"""LICENSE
Copyright 2015 Hermann Krumrey <hermann@krumreyh.com>

This file is part of toktokkie.

toktokkie is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

toktokkie is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with toktokkie.  If not, see <http://www.gnu.org/licenses/>.
LICENSE"""

import os
import shutil
import argparse
from toktokkie import Directory
from toktokkie.exceptions import MissingMetadata, InvalidMetadata


def main():
    """
    The toktokkie-archive main method
    :return: None
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("directories", nargs="+",
                        help="The directories to archive. "
                             "Files and directories that do not contain any "
                             "valid metadata configuration will be ignored.")
    parser.add_argument("--out", "-o", default=None,
                        help="Specifies an output directory for the archived "
                             "directory/directories")
    args = parser.parse_args()
    directories = args.directories
    output_path = args.out

    if not os.path.isdir(output_path) and not os.path.exists(output_path):
        os.makedirs(output_path)
    if not os.path.isdir(output_path):
        print("Could not create {}".format(output_path))

    for path in args.directories:

        try:
            directory = Directory(path)
            if len(directories) == 1:
                archive_path = output_path
            else:
                archive_path = os.path.join(
                    output_path, directory.metadata.name
                )
            if not os.path.isdir(archive_path):
                os.makedirs(archive_path)
            archive(directory.path, archive_path)

        except MissingMetadata:
            print("{} has no metadata file.".format(path))
        except InvalidMetadata:
            print("{}'s metadata is invalid.".format(path))


def archive(source: str, dest: str):
    """
    Creates a low-filesize archive of a directory into a new directory
    :param source: The source directory
    :param dest: The destination directory
    :return: None
    """

    for child in os.listdir(source):
        child_path = os.path.join(source, child)
        dest_child_path = os.path.join(dest, child)

        if os.path.isfile(child_path):
            if not child_path.endswith(".json"):
                with open(dest_child_path, "w") as f:
                    f.write("")
            else:
                shutil.copyfile(child_path, dest_child_path)

        elif os.path.isdir(child_path):
            if not os.path.isdir(dest_child_path):
                os.makedirs(dest_child_path)

            archive(child_path, dest_child_path)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Thanks for using toktokkie!")
